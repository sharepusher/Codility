## Redis basic operation samples

import gc
import os
import redis
import ujson as json
import traceback
import config
import time
from public.logger import Log

class Global(object):
    # redis connection pool
    redis = None
    """:type: redis.Redis"""
    redis_response = None
    """:type: redis.Redis"""
    # noroom_ratecodes
    codes = set()
    REDIS_KEY_CODES = "xxx:xxx:xxx:codes:%s_%s_%s"
    @classmethod
    def init(cls):
        try:
            redis_pool = redis.ConnectionPool(host=config.CODIS_SERVER_HOST, port=config.CODIS_SERVER_PORT)
            cls.redis = redis.Redis(connection_pool=redis_pool)
            # response_redis_pool = redis.ConnectionPool(host=config.CODIS_CACHE_RESPONSE_HOST, port=config.CODIS_CACHE_RESPONSE_PORT)
            cls.redis_response = redis.Redis(host=config.CODIS_CACHE_RESPONSE_HOST, port=config.CODIS_CACHE_RESPONSE_PORT)
            return True
        except:
            return False

    @classmethod
    def get_xxx_codes(cls, redis_key, interval=None):
        """
        get xxx codes from codis
        Args:
            redis_key:
            interval: time(minutes) range to query
        Returns: data set
        """
        if not interval:
            interval = config.RECENT_MINUTES
        codes = set()
        try:
            result = cls.redis.hgetall(redis_key)
            #Log.debug('@get_xxx_codes hgetall key - %s' % redis_key)
        except:
            #Log.error('@get_xxx_codes failed to hgetall:%s' % traceback.format_exc())
            return codes
        if not result:
            return ratecodes
        #Log.info('@get_codes redis result is available, key - %s' % redis_key)
        current_time = int(time.time())
        interval = 60*interval
        try:
            # only remain the code timestamp less than interval (not included)
            codes = set([xxx_code for xxx_code, create_time in result.iteritems() if current_time-int(create_time) < interval])
        except:
            Log.error('@get_xxx_ratecodes failed to compare interval time:%s' % traceback.format_exc())
        return codes
    @classmethod
    def record_xxx_codes(cls, xxx):
       current_time = int(time.time())
       try:
           redis_key = cls.REDIS_KEY_CODES % (xxx)
           cls.redis.hset(redis_key, self.sp_rate_code, current_time)
           cls.redis.expire(redis_key, config.CODE_XXX_EXPIRE)
           Log.info('@record_xxx_codes:%s' % (current_time))
       except:
           Log.error('Redis records codes error %s' % traceback.format_exc())

class Coder(object):
    logger = Log

    def __init__(self):
        pass

    @classmethod
    def filter_xxx_result(cls, result, rtype, redis_key):
        # @result: list of dict
        codes = Redis.get_xxx_codes(redis_key)
        rates = result[rtype]
        if not rates or not codes:
            return
        cls.logger.info('@filter_xxx_result  rates:%s' % (rates))
        try:
            cls.logger.debug('@filter_xxx_result len:%d; codess:%s' % (len(codes),codes))
            cls.logger.info('@filter_xxx_result rates len:%d; valid rates len:%d' % (len(rates), len(codes)))
            result[rtype] = filter(lambda rate: rate.get(Const.rcode) not in codes, rates)
            cls.logger.info('@filter_xxx_result filtered rates len:%d' % (len(result[rtype])))
            cls.logger.debug('@filter_xxx_result filtered rates len:%d, filtered rates:%s' % (len(result[rtype]), result[rtype]))
        except:
            cls.logger.error('@filter_xxx_result failed to filter %s result:%s' % (rtype, traceback.format_exc()))
            cls.logger.error('@filter_xxx_result rates=%s' % rates)
        return



if __name__ == "__main__":
    pass
